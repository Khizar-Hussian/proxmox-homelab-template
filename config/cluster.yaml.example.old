---
# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                    PROXMOX HOMELAB TEMPLATE CONFIGURATION                   ║
# ╚══════════════════════════════════════════════════════════════════════════════╝
#
# 🏠 Welcome! This file configures your entire homelab infrastructure.
# 📝 Copy this file to cluster.yaml and customize for your environment.
# 🔒 SECURITY: Never commit cluster.yaml to Git (it contains your real settings)
#
# 📖 Quick Start:
#   1. Set your domain name and email below
#   2. Configure your Proxmox and TrueNAS IP addresses  
#   3. Set timezone and basic network settings
#   4. Advanced settings can be left as defaults initially
#
# 💡 Legend:
#   ⚠️  = Required (must be configured)
#   🔧 = Recommended (should configure for best experience)
#   💡 = Optional (can leave as default)

# ══════════════════════════════════════════════════════════════════════════════
# 🏠 BASIC CLUSTER SETTINGS
# ══════════════════════════════════════════════════════════════════════════════

cluster:
  # ⚠️ Your homelab name (used in certificates, monitoring, etc.)
  name: &cluster_name "homelab"
  
  # ⚠️ Your domain name (can be from any registrar, just needs Cloudflare DNS)
  # Examples: mydomain.com, homelab.dev, myname.net
  domain: &domain "yourdomain.com"
  
  # 🔧 Internal domain (usually same as above for simplicity)  
  internal_domain: *domain
  
  # ⚠️ Your timezone (used for backups, logs, monitoring)
  # Find yours: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  timezone: "America/New_York"
  
  # ⚠️ Admin email (used for SSL certificates and alerts)
  admin_email: "admin@yourdomain.com"

# ══════════════════════════════════════════════════════════════════════════════
# 🖥️ PROXMOX SERVER SETTINGS  
# ══════════════════════════════════════════════════════════════════════════════

proxmox:
  # ⚠️ Your Proxmox server IP address
  host: "192.168.1.10"
  
  # 💡 Proxmox web interface port (usually 8006)
  api_port: 8006
  
  # 🔧 Where to store containers (check: pvesm status)
  storage: "local-lvm"
  
  # 🔧 Container template (download with: pveam available --section system)
  template: "local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"

# ══════════════════════════════════════════════════════════════════════════════
# 🌐 NETWORK CONFIGURATION
# ══════════════════════════════════════════════════════════════════════════════

networks:
  # Your existing home network
  management:
    bridge: "vmbr0"              # Existing Proxmox bridge
    subnet: "192.168.1.0/24"     # ⚠️ Your home network range
    gateway: "192.168.1.1"       # ⚠️ Your router IP
    
  # Container network (automatically created)
  containers:
    bridge: "vmbr1"              # New bridge for containers
    subnet: "10.0.0.0/24"        # Container network (isolated from your home)
    gateway: "10.0.0.1"          # Container gateway
    
    # 💡 Why 10.0.0.0/24 instead of 192.168.x.x?
    # - Security: Isolates containers from your personal devices
    # - VPN safety: Download services can't access your main network  
    # - No conflicts: Won't interfere with existing devices
    # - Professional: Industry standard practice
    
  # Reserved IP addresses for core services
  core_services:
    pihole: "10.0.0.40"          # DNS and ad-blocking
    nginx_proxy: "10.0.0.41"     # Reverse proxy with SSL
    monitoring: "10.0.0.42"      # Grafana and Prometheus
    authentik: "10.0.0.43"       # Authentication and SSO
    
  # VPN and download services  
  download_services:
    vpn_gateway: "10.0.0.10"     # VPN connection
    qbittorrent: "10.0.0.11"     # Download client (for Linux ISOs, etc.)
    
  # Productivity and self-hosted services
  productivity_services:
    nextcloud: "10.0.0.60"       # File sharing and collaboration
    vaultwarden: "10.0.0.61"     # Password manager
    jellyfin: "10.0.0.62"        # Media server (home videos, photos)
    
  # 💡 User services automatically start from 10.0.0.70
  # Add your own services in config/services/ directory

# ══════════════════════════════════════════════════════════════════════════════
# 💾 STORAGE SETTINGS
# ══════════════════════════════════════════════════════════════════════════════

storage:
  # ⚠️ Your NFS server (TrueNAS, Synology, etc.)
  nfs_server: "192.168.1.20"
  
  # ⚠️ Base paths on your NFS server
  paths:
    media: "/mnt/tank/media"      # Movies, TV shows, music
    config: "/mnt/tank/config"    # Service configurations
    backups: "/mnt/tank/backups"  # Automated backups

# ══════════════════════════════════════════════════════════════════════════════
# 🔐 AUTHENTICATION & SSO
# ══════════════════════════════════════════════════════════════════════════════

authentication:
  # Self-hosted authentication with Authentik
  authentik:
    enabled: true               # 🔧 Recommended for centralized auth
    
    # Authentik configuration
    domain: "auth.yourdomain.com"  # Subdomain for Authentik
    
    # Authentication providers
    providers:
      # Local users (Authentik's built-in user database)
      local_users: true
      
      # Social authentication (optional)
      google:
        enabled: false          # 💡 Enable for Google SSO
        client_id: "${GOOGLE_CLIENT_ID}"
        client_secret: "${GOOGLE_CLIENT_SECRET}"
      
      github:
        enabled: false          # 💡 Enable for GitHub SSO
        client_id: "${GITHUB_CLIENT_ID}"
        client_secret: "${GITHUB_CLIENT_SECRET}"
      
      # LDAP integration (optional)
      ldap:
        enabled: false          # 💡 Enable for Active Directory/LDAP
        server: "ldap://your-ldap-server"
        bind_dn: "cn=admin,dc=example,dc=com"
    
    # Default user and admin settings
    admin:
      email: "admin@yourdomain.com"
      # Password set via environment variable: AUTHENTIK_ADMIN_PASSWORD
    
    # Multi-factor authentication
    mfa:
      enabled: true             # 🔧 Highly recommended
      methods:
        - "totp"                # Time-based OTP (Google Authenticator, etc.)
        - "static"              # Recovery codes
        # - "webauthn"          # Hardware keys (YubiKey, etc.)
    
    # Session settings
    session:
      lifetime: "12h"           # How long users stay logged in
      remember_me: true         # Allow "remember me" option
    
    # 📘 HOW AUTHENTIK SSO WORKS:
    # 1. User visits protected service (e.g., grafana.yourdomain.com)
    # 2. Nginx proxy redirects to auth.yourdomain.com for login
    # 3. User authenticates with Authentik (username/password + MFA)
    # 4. Authentik generates session token and redirects back to service
    # 5. User has seamless access to all protected services
    # 6. Single logout logs out of all services
  # How to handle SSL certificates
  type: "internal"              # "internal" = self-signed CA, "letsencrypt" = public certs
  
  # 🔧 Let's Encrypt settings (if type: "letsencrypt")
  letsencrypt:
    email: "admin@yourdomain.com"
    dns_provider: "cloudflare"

# ══════════════════════════════════════════════════════════════════════════════
# 🌍 EXTERNAL ACCESS  
# ══════════════════════════════════════════════════════════════════════════════

external_access:
  # Cloudflare tunnels for secure external access
  # ⚠️ NOTE: Video streaming (Jellyfin) violates Cloudflare TOS
  cloudflare:
    enabled: true               # 🔧 Enable to access services from anywhere
    tunnel_name: "homelab-tunnel"
    
    # Which services to expose publicly (no authentication required)
    public_services:
      - "nextcloud"             # File sharing (has own auth)
      - "authentik"             # Authentication service (public login page)
      
    # Which services need Authentik SSO authentication
    # 📘 AUTHENTICATION: Authentik provides self-hosted SSO with OIDC/SAML
    # Users login through Authentik, then get automatic access to these services
    protected_services:
      - "qbittorrent"           # Download client
      - "vaultwarden"           # Password manager  
      - "grafana"               # Monitoring
      - "nginx-proxy"           # Proxy manager (admin interface)
      
    # Which services stay internal only
    private_services:
      - "pihole"                # DNS server
      - "jellyfin"              # Media server (use VPS proxy or Tailscale instead)
  
  # VPS proxy for bandwidth-intensive services (recommended for Jellyfin)
  vps_proxy:
    enabled: false              # 🔧 Enable if you have a VPS for media streaming
    host: "your-vps-ip"
    services:
      - "jellyfin"              # Media server (TOS-compliant alternative)
  
  # 🔧 VPS + Tailscale setup (recommended for media streaming)
  # This creates a secure mesh network between your homelab and VPS
  tailscale_vps:
    enabled: false              # 💡 Enable for TOS-compliant media streaming
    
    # VPS configuration
    vps:
      provider: "digitalocean"   # digitalocean, linode, vultr, etc.
      region: "nyc1"            # Choose region close to you
      size: "s-1vcpu-1gb"       # Small VPS sufficient for proxy
      
    # Services to proxy through VPS
    proxied_services:
      - service: "jellyfin"
        external_port: 443       # HTTPS on VPS
        internal_port: 8096      # Jellyfin port on homelab
        domain: "jellyfin.yourdomain.com"
        
      # Add more bandwidth-intensive services here
      # - service: "plex"
      #   external_port: 443
      #   internal_port: 32400
      #   domain: "plex.yourdomain.com"
    
    # Tailscale configuration
    tailscale:
      # Both homelab and VPS join same tailnet
      tailnet: "your-tailnet-name"
      # Auth keys generated from Tailscale admin console
      auth_key_homelab: "${TAILSCALE_AUTH_KEY_HOMELAB}"
      auth_key_vps: "${TAILSCALE_AUTH_KEY_VPS}"
      
    # 📘 HOW IT WORKS:
    # 1. VPS and homelab both connect to Tailscale mesh network
    # 2. VPS runs nginx proxy with SSL certificates
    # 3. External users connect to VPS (jellyfin.yourdomain.com)
    # 4. VPS forwards requests to homelab over Tailscale (encrypted)
    # 5. No Cloudflare TOS violations, secure tunnel, great performance
    
  # Alternative: Direct VPN access for advanced users
  direct_vpn:
    enabled: false              # 💡 Enable for direct network access
    provider: "wireguard"       # wireguard, openvpn
    port: 51820                 # VPN port to expose
    # Users install VPN client and connect directly to your network

# ══════════════════════════════════════════════════════════════════════════════
# 🔒 VPN CONFIGURATION
# ══════════════════════════════════════════════════════════════════════════════

vpn:
  # 🔧 VPN for download services (keeps your IP private)
  enabled: true
  provider: "nordvpn"           # nordvpn, surfshark, expressvpn, etc.
  protocol: "wireguard"         # wireguard (fast) or openvpn (compatible)
  country: "Netherlands"        # Preferred server location
  
  # Services that use VPN (for privacy)
  routed_services:
    - "qbittorrent"             # Download client through VPN

# ══════════════════════════════════════════════════════════════════════════════
# 📊 MONITORING & ALERTS
# ══════════════════════════════════════════════════════════════════════════════

monitoring:
  enabled: true                 # 🔧 Recommended for health monitoring
  
  # Data retention
  prometheus_retention: "30d"   # How long to keep metrics
  
  # Alert notifications
  alerts:
    discord: true               # 💡 Get alerts in Discord
    email: true                 # 💡 Get alerts via email
    
    # What to alert on
    rules:
      service_down: true        # Alert if services stop working
      high_cpu: true           # Alert if CPU usage > 85%
      low_disk: true           # Alert if disk space < 10%
      cert_expiry: true        # Alert if certificates expire soon

# ══════════════════════════════════════════════════════════════════════════════
# 💾 BACKUP CONFIGURATION
# ══════════════════════════════════════════════════════════════════════════════

backups:
  enabled: true                 # 🔧 Highly recommended
  encryption: true              # 🔧 Encrypt backups for security
  
  # Backup schedules
  daily: "2:00 AM"             # Small backups (configs, databases)
  weekly: "3:00 AM Sunday"     # Medium backups (container snapshots)  
  monthly: "4:00 AM 1st"       # Full backups (everything)
  
  # How long to keep backups
  retention:
    daily: 7                    # Keep 7 daily backups
    weekly: 4                   # Keep 4 weekly backups
    monthly: 12                 # Keep 12 monthly backups

# ══════════════════════════════════════════════════════════════════════════════
# ⚙️ ADVANCED SETTINGS (can usually leave as defaults)
# ══════════════════════════════════════════════════════════════════════════════

# Default resources for new containers
defaults:
  cpu: 1                        # CPU cores
  memory: 512                   # RAM in MB
  disk: 8                       # Disk space in GB

# DNS settings
dns:
  upstream_servers:
    - "1.1.1.1"                 # Cloudflare DNS
    - "8.8.8.8"                 # Google DNS
  ad_blocking: true             # Block ads network-wide

# Security settings  
security:
  firewall: true                # Enable firewall rules
  fail2ban: true               # Block brute force attempts
  auto_updates: true           # Install security updates automatically

# ══════════════════════════════════════════════════════════════════════════════
# 📝 CONFIGURATION NOTES
# ══════════════════════════════════════════════════════════════════════════════
#
# 🔧 NEXT STEPS AFTER EDITING:
#   1. Save this file as cluster.yaml
#   2. Set GitHub Secrets (see README.md for complete setup guide)
#   3. Run: ./scripts/deploy.sh (or use GitOps by pushing to main branch)
#
# 🔒 REQUIRED GITHUB SECRETS (set in GitHub repository settings):
#   PROXMOX_TOKEN            = API token from Proxmox
#   CLOUDFLARE_API_TOKEN     = API token from Cloudflare  
#   CLOUDFLARE_TUNNEL_TOKEN  = Cloudflare tunnel token
#   AUTHENTIK_ADMIN_PASSWORD = Admin password for Authentik
#   
# 💡 OPTIONAL GITHUB SECRETS:
#   NORDVPN_PRIVATE_KEY      = For VPN functionality
#   DISCORD_WEBHOOK          = For Discord notifications
#   BACKUP_GPG_KEY           = For backup encryption
#   GOOGLE_CLIENT_ID         = For Google SSO in Authentik
#   GOOGLE_CLIENT_SECRET     = For Google SSO in Authentik
#   GITHUB_CLIENT_ID         = For GitHub SSO in Authentik
#   GITHUB_CLIENT_SECRET     = For GitHub SSO in Authentik
#
# 📘 HOW ENVIRONMENT VARIABLES WORK:
#   1. You set secrets in GitHub repository settings
#   2. GitHub Actions automatically creates .env files during deployment
#   3. No manual .env file editing required!
#
# 📚 DOCUMENTATION (coming soon):
#   - Installation: docs/installation.md
#   - Service management: docs/services.md  
#   - Troubleshooting: docs/troubleshooting.md
#   - GitOps workflow: docs/gitops.md